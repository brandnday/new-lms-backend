{"version":3,"sources":["../../src/controllers/admins.js"],"names":["pgPool","bcrypt","saltRounds","isActive","list","ctx","username","role","pagination","request","body","rolequery","queryParam","push","mainQuery","res","query","page","size","resCount","ok","response","rows","totalData","count","add","password","email","phone","requestData","salt","genSaltSync","hashedpass","hashSync","update","editingId","deactivate"],"mappings":"AAAA,SAASA,MAAT,QAAuB,sBAAvB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;AAEA,MAAMC,aAAa,EAAnB;AACA,MAAMC,WAAY,cAAlB;AACA,OAAO,MAAMC,OAAO,MAAMC,GAAN,IAAa;AAC/B,QAAM,EAAEC,QAAF,EAAYC,IAAZ,EAAkBC,UAAlB,KAAgCH,IAAII,OAAJ,CAAYC,IAAlD;AACA,QAAMC,YAAa,eAAnB;AACA,QAAMC,aAAa,CAAE,IAAGN,QAAS,GAAd,CAAnB;AACAC,WAAS,KAAT,IAAkBK,WAAWC,IAAX,CAAgBN,IAAhB,CAAlB;AACA,QAAMO,YAAa;2BACMP,SAAS,KAAT,GAAiBI,SAAjB,GAA6B,EAAG;QACnDR,QAAS,EAFf;AAGA,QAAMY,MAAM,MAAMf,OAAOgB,KAAP,CACf,+CAA8CF,SAAU;;aAEhD,CAACN,WAAWS,IAAX,GAAgB,CAAjB,IAAoBT,WAAWU,IAAK,UAASV,WAAWU,IAAK,EAHtD,EAIhBN,UAJgB,CAAlB;AAMA,QAAMO,WAAW,MAAMnB,OAAOgB,KAAP,CACpB,mBAAkBF,SAAU,EADR,EAErBF,UAFqB,CAAvB;AAIAP,MAAIe,EAAJ,CAAO,EAAEC,UAAU,EAACC,MAAKP,IAAIO,IAAV,EAAeC,WAAUJ,SAASG,IAAT,CAAc,CAAd,EAAiBE,KAA1C,EAAZ,EAAP;AACD,CAnBM;;AAqBP,OAAO,MAAMC,MAAM,MAAMpB,GAAN,IAAa;AAC9B,QAAM,EAACC,QAAD,EAAUoB,QAAV,EAAmBC,KAAnB,EAAyBC,KAAzB,EAA+BrB,IAA/B,KAAuCF,IAAII,OAAJ,CAAYC,IAAZ,CAAiBmB,WAA9D;AACA,QAAMC,OAAO7B,OAAO8B,WAAP,CAAmB7B,UAAnB,CAAb;AACA,QAAM8B,aAAa/B,OAAOgC,QAAP,CAAgBP,QAAhB,EAA0BI,IAA1B,CAAnB;AACA,QAAMf,MAAM,MAAMf,OAAOgB,KAAP,CACjB;;6BADiB,EAIlB,CAACV,QAAD,EAAW0B,UAAX,EAAuBzB,IAAvB,EAA6BoB,KAA7B,EAAoCC,KAApC,CAJkB,CAAlB;AAKAvB,MAAIe,EAAJ,CAAO,EAAEC,UAAUN,IAAIO,IAAhB,EAAP;AACD,CAVM;;AAYP,OAAO,MAAMY,SAAS,MAAM7B,GAAN,IAAa;AACjC,QAAM,EAACC,QAAD,EAAUoB,QAAV,EAAmBC,KAAnB,EAAyBC,KAAzB,EAA+BrB,IAA/B,EAAoC4B,SAApC,KAAiD9B,IAAII,OAAJ,CAAYC,IAAZ,CAAiBmB,WAAxE;AACA,QAAMC,OAAO,MAAM7B,OAAO8B,WAAP,CAAmB7B,UAAnB,CAAnB;AACA,QAAM8B,aAAa,MAAM/B,OAAOgC,QAAP,CAAgBP,QAAhB,EAA0BI,IAA1B,CAAzB;AACA,QAAMf,MAAM,MAAMf,OAAOgB,KAAP,CACjB;;cADiB,EAIlB,CAACV,QAAD,EAAW0B,UAAX,EAAuBzB,IAAvB,EAA6BoB,KAA7B,EAAoCC,KAApC,EAA0CO,SAA1C,CAJkB,CAAlB;AAKA9B,MAAIe,EAAJ,CAAO,EAAEC,UAAUN,IAAIO,IAAhB,EAAP;AACD,CAVM;AAWP,OAAO,MAAMc,aAAa,MAAM/B,GAAN,IAAa;AACrC,QAAM,EAAC8B,SAAD,KAAc9B,IAAII,OAAJ,CAAYC,IAAZ,CAAiBmB,WAArC;AACA,QAAMd,MAAM,MAAMf,OAAOgB,KAAP,CACjB;cADiB,EAGlB,CAACmB,SAAD,CAHkB,CAAlB;AAIA9B,MAAIe,EAAJ,CAAO,EAAEC,UAAUN,IAAIO,IAAhB,EAAP;AACD,CAPM","file":"admins.js","sourcesContent":["import { pgPool } from \"../services/database\";\nimport bcrypt from 'bcrypt-nodejs'\n\nconst saltRounds = 10;\nconst isActive = `status = 'A'`;\nexport const list = async ctx => {\n  const { username, role ,pagination} = ctx.request.body;\n  const rolequery = `and role = $2`;\n  const queryParam = [`%${username}%`];\n  role !== \"ALL\" && queryParam.push(role);\n  const mainQuery = `from truser \n  where username like $1 ${role !== \"ALL\" ? rolequery : \"\"}\n  and ${isActive}`\n  const res = await pgPool.query(\n    `select id,username,role,email,phone, status ${mainQuery}\n    ORDER BY id\n    OFFSET ${(pagination.page-1)*pagination.size} LIMIT ${pagination.size}`,\n    queryParam\n  );\n  const resCount = await pgPool.query(\n    `select count(*) ${mainQuery}`,\n    queryParam\n  );\n  ctx.ok({ response: {rows:res.rows,totalData:resCount.rows[0].count} });\n};\n\nexport const add = async ctx => {\n  const {username,password,email,phone,role} = ctx.request.body.requestData;\n  const salt = bcrypt.genSaltSync(saltRounds);\n  const hashedpass = bcrypt.hashSync(password, salt);\n  const res = await pgPool.query(\n  `insert into \n  truser(username,password,role,email,phone,status) \n  values($1,$2,$3,$4,$5,'A')`,\n  [username, hashedpass, role, email, phone]);\n  ctx.ok({ response: res.rows });\n};\n\nexport const update = async ctx => {\n  const {username,password,email,phone,role,editingId} = ctx.request.body.requestData;\n  const salt = await bcrypt.genSaltSync(saltRounds);\n  const hashedpass = await bcrypt.hashSync(password, salt);\n  const res = await pgPool.query(\n  `update truser set username=$1, password=$2,\n  role=$3, email = $4, phone = $5, status='A'\n  where id=$6`,\n  [username, hashedpass, role, email, phone,editingId]);\n  ctx.ok({ response: res.rows });\n};\nexport const deactivate = async ctx => {\n  const {editingId} = ctx.request.body.requestData;\n  const res = await pgPool.query(\n  `update truser set status='D'\n  where id=$1`,\n  [editingId]);\n  ctx.ok({ response: res.rows });\n};\n"]}