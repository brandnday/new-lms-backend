{"version":3,"sources":["../../src/controllers/churches.js"],"names":["isActive","list","ctx","request","body","churchname","pagination","queryParam","mainQuery","pgPool","query","page","size","res","resCount","ok","response","rows","totalData","count","add","requestData","description","update","editingId","deactivate","availableList","token","payload","user","id","all","adminChurchMap","userid","deleteMapping","mapId","addMapping","churchid","role","isNotExist","length"],"mappings":"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","file":"churches.js","sourcesContent":["import { pgPool } from \"../services/database\";\nimport {decodeToken} from '../services/token'\n\nconst isActive = `status = 'A'`;\nexport const list = async ctx => {\n  const { churchname, pagination } = ctx.request.body;\n  const queryParam = [`%${churchname}%`];\n  const mainQuery = `from mschurch \n  where churchname like $1 \n  and ${isActive}`;\n  const res = await pgPool.query(\n    `select id,churchname,description, status ${mainQuery}\n    ORDER BY id\n    OFFSET ${(pagination.page - 1) * pagination.size} LIMIT ${pagination.size}`,\n    queryParam\n  );\n  const resCount = await pgPool.query(\n    `select count(*) ${mainQuery}`,\n    queryParam\n  );\n  ctx.ok({ response: { rows: res.rows, totalData: resCount.rows[0].count } });\n};\n\nexport const add = async ctx => {\n  const { churchname, description } = ctx.request.body.requestData;\n  const res = await pgPool.query(\n    `insert into \n  mschurch(churchname,description,status) \n  values($1,$2,'A')`,\n    [churchname, description]\n  );\n  ctx.ok({ response: res.rows });\n};\n\nexport const update = async ctx => {\n  const { churchname, description, editingId } = ctx.request.body.requestData;\n  const res = await pgPool.query(\n    `update mschurch set churchname=$1, description=$2, status='A'\n  where id=$3`,\n    [churchname, description, editingId]\n  );\n  ctx.ok({ response: res.rows });\n};\nexport const deactivate = async ctx => {\n  const { editingId } = ctx.request.body.requestData;\n  const res = await pgPool.query(\n    `update mschurch set status='D'\n  where id=$1`,\n    [editingId]\n  );\n  ctx.ok({ response: res.rows });\n};\n\n// view\nexport const availableList = async ctx=>{\n  const { token } = ctx.request.body;\n  const {payload} = decodeToken(token);\n  const res = await pgPool.query(\n    `select id,churchname from mschurch where id in(\n    (select churchid from trmappinguserwithchurch\n    where userid = $1\n    and status = 'A')) AND status = 'A'`,[payload.user.id]);\n  ctx.ok({ response: res.rows });\n}\n\nexport const all = async ctx => {\n  //const {churchname, description} = ctx.request.body.requestData;\n  const res = await pgPool.query(\n    `select * from\n  mschurch`\n  );\n  ctx.ok({ response: res.rows });\n};\n\nexport const adminChurchMap = async ctx => {\n  const { userid } = ctx.request.body;\n  const res = await pgPool.query(\n    `select a.id,c.churchname,a.role from trmappinguserwithchurch a\n    join mschurch c on a.churchid=c.id\n    where a.userid = $1 \n    and a.status ='A'\n    and c.status ='A'`,\n    [userid]\n  );\n  ctx.ok({ response: res.rows });\n};\n\n\nexport const deleteMapping = async ctx => {\n  const { mapId } = ctx.request.body.requestData;\n  const res = await pgPool.query(\n    `update trmappinguserwithchurch set status='D'\n  where id=$1`,\n    [mapId]\n  );\n  ctx.ok({ response: res.rows });\n};\n\nexport const addMapping = async ctx => {\n  const { userid, churchid,role } = ctx.request.body.requestData;\n  const res = await pgPool.query(\n    `select * from trmappinguserwithchurch\n    where userid = $1 and churchid=$2\n    and status ='A'`,\n    [userid, churchid]\n  );\n  const isNotExist = res.rows.length < 1;\n  isNotExist &&\n    (await pgPool.query(\n      `insert into trmappinguserwithchurch(userid, churchid,role, status)\n  VALUES($1,$2,$3,'A')`,\n      [userid, churchid,role]\n    ));\n  ctx.ok({ response: true });\n};\n"]}