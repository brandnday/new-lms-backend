{"version":3,"sources":["../../src/services/auth.js"],"names":["passport","require","LocalStrategy","Strategy","bcrypt","Pool","pool","user","host","database","password","port","options","usernameField","passwordField","comparePass","userPassword","databasePassword","compareSync","serializeUser","done","id","deserializeUser","query","err","res","rows","end"],"mappings":"AAAA,MAAMA,WAAWC,QAAQ,cAAR,CAAjB;AACA,MAAMC,gBAAgBD,QAAQ,gBAAR,EAA0BE,QAAhD;AACA,MAAMC,SAASH,QAAQ,eAAR,CAAf;AACA,MAAM,EAAEI,IAAF,KAAWJ,QAAQ,IAAR,CAAjB;AACA,MAAMK,OAAO,IAAID,IAAJ,CAAS;AACpBE,QAAM,WADc;AAEpBC,QAAM,WAFc;AAGpBC,YAAU,MAHU;AAIpBC,YAAU,kBAJU;AAKpBC,QAAM;AALc,CAAT,CAAb;AAOA,MAAMC,UAAU;AACdC,iBAAe,UADD;AAEdC,iBAAe;AAFD,CAAhB;;AAKA,MAAMC,cAAc,CAACC,YAAD,EAAeC,gBAAf,KAAoC;AACtD,SAAOb,OAAOc,WAAP,CAAmBF,YAAnB,EAAiCC,gBAAjC,CAAP;AACD,CAFD;;AAIAjB,SAASmB,aAAT,CAAuB,CAACZ,IAAD,EAAOa,IAAP,KAAgB;AACrCA,OAAK,IAAL,EAAWb,KAAKc,EAAhB;AACD,CAFD;;AAIArB,SAASsB,eAAT,CAAyB,CAACD,EAAD,EAAKD,IAAL,KAAc;;AAErCd,OAAKiB,KAAL,CACG,2CAA0CF,EAAG,EADhD,EAEE,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;AAClB,QAAID,GAAJ,EAAS;AACP,aAAOJ,KAAKI,GAAL,CAAP;AACD;AACD,QAAI,CAACC,GAAL,EAAU;AACR,aAAOL,KAAK,IAAL,EAAW,KAAX,CAAP;AACD;AACD,QAAIV,aAAae,IAAIC,IAAJ,CAAS,CAAT,EAAYhB,QAA7B,EAAuC;AACrC,aAAOU,KAAK,IAAL,EAAW,KAAX,CAAP;AACD,KAFD,MAEO;AACL,YAAMd,KAAKqB,GAAL,EAAN;AACA,aAAOP,KAAK,IAAL,EAAW,KAAX,CAAP;AACD;AACF,GAfH;AAiBD,CAnBD","file":"auth.js","sourcesContent":["const passport = require(\"koa-passport\");\nconst LocalStrategy = require(\"passport-local\").Strategy;\nconst bcrypt = require(\"bcrypt-nodejs\");\nconst { Pool } = require(\"pg\");\nconst pool = new Pool({\n  user: \"brandnday\",\n  host: \"localhost\",\n  database: \"adb1\",\n  password: \"iwillliveandlove\",\n  port: 5433\n});\nconst options = {\n  usernameField: \"username\",\n  passwordField: \"password\"\n};\n\nconst comparePass = (userPassword, databasePassword) => {\n  return bcrypt.compareSync(userPassword, databasePassword);\n};\n\npassport.serializeUser((user, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser((id, done) => {\n\n  pool.query(\n    `select id, username from users where id=${id}`,\n    async (err, res) => {\n      if (err) {\n        return done(err);\n      }\n      if (!res) {\n        return done(null, false);\n      }\n      if (password !== res.rows[0].password) {\n        return done(null, false);\n      } else {\n        await pool.end();\n        return done(null, false);\n      }\n    }\n  );\n});\n"]}