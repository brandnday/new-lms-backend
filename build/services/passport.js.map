{"version":3,"sources":["../../src/services/passport.js"],"names":["require","passport","JwtStrategy","Strategy","ExtractJwt","bcrypt","LocalStrategy","pgPool","localOptions","usernameField","comparePass","userPassword","databasePassword","compareSync","localLogin","username","password","done","resauth","query","rows","length","privKey","jwtOptions","jwtFromRequest","fromHeader","secretOrKey","jwtLogin","payload","id","user","use"],"mappings":"AAAAA,QAAQ,gBAAR;AACA,MAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA;AACA,MAAME,cAAcF,QAAQ,cAAR,EAAwBG,QAA5C;AACA,MAAMC,aAAaJ,QAAQ,cAAR,EAAwBI,UAA3C;AACA,MAAMC,SAASL,QAAQ,eAAR,CAAf;AACA,MAAMM,gBAAgBN,QAAQ,gBAAR,CAAtB;AACA,MAAM,EAAEO,MAAF,KAAaP,QAAQ,YAAR,CAAnB;AACA,MAAMQ,eAAe,EAAEC,eAAe,UAAjB,EAArB;;AAEA,MAAMC,cAAc,CAACC,YAAD,EAAeC,gBAAf,KAAoC;AACtD,SAAOP,OAAOQ,WAAP,CAAmBF,YAAnB,EAAiCC,gBAAjC,CAAP;AACD,CAFD;;AAIA,MAAME,aAAa,IAAIR,aAAJ,CACjBE,YADiB,EAEjB,OAAOO,QAAP,EAAiBC,QAAjB,EAA2BC,IAA3B,KAAoC;AAClC,QAAMC,UAAU,MAAMX,OAAOY,KAAP,CACnB,6DADmB,EAEpB,CAACJ,QAAD,CAFoB,CAAtB;AAIA,MAAI,CAACG,QAAQE,IAAR,CAAaC,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,WAAOJ,KAAK,IAAL,EAAW,KAAX,CAAP;AACD;AACD,MAAI,CAACP,YAAYM,QAAZ,EAAsBE,QAAQE,IAAR,CAAa,CAAb,EAAgBJ,QAAtC,CAAL,EAAsD;AACpD,WAAOC,KAAK,IAAL,EAAW,KAAX,CAAP;AACD;;AAED,SAAOA,KAAK,IAAL,EAAWC,QAAQE,IAAR,CAAa,CAAb,CAAX,CAAP;AACD,CAfgB,CAAnB;;AAkBA,MAAME,UAAU,mDAAhB;AACA;AACA,MAAMC,aAAa;AACjBC,kBAAgBpB,WAAWqB,UAAX,CAAsB,UAAtB,CADC;AAEjBC,eAAaJ;AAFI,CAAnB;;AAKA;AACA,MAAMK,WAAW,IAAIzB,WAAJ,CAAgBqB,UAAhB,EAA4B,gBAAeK,OAAf,EAAwBX,IAAxB,EAA8B;AACzE;AACA;AACA;AACA,QAAM,EAAEY,EAAF,EAAMd,QAAN,KAAmBa,QAAQE,IAAjC;AACA,QAAMZ,UAAU,MAAMX,OAAOY,KAAP,CACnB,2DADmB,EAEpB,CAACU,EAAD,EAAKd,QAAL,CAFoB,CAAtB;AAIA,MAAI,CAACG,QAAQE,IAAR,CAAaC,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,WAAOJ,KAAK,IAAL,EAAW,KAAX,CAAP;AACD;AACD,SAAOA,KAAK,IAAL,EAAW,IAAX,CAAP;AACD,CAbgB,CAAjB;;AAeAhB,SAAS8B,GAAT,CAAaJ,QAAb;AACA1B,SAAS8B,GAAT,CAAajB,UAAb","file":"passport.js","sourcesContent":["require(\"babel-polyfill\");\nconst passport = require(\"passport\");\n//const config = require('../config');\nconst JwtStrategy = require(\"passport-jwt\").Strategy;\nconst ExtractJwt = require(\"passport-jwt\").ExtractJwt;\nconst bcrypt = require(\"bcrypt-nodejs\");\nconst LocalStrategy = require(\"passport-local\");\nconst { pgPool } = require(\"./database\");\nconst localOptions = { usernameField: \"username\" };\n\nconst comparePass = (userPassword, databasePassword) => {\n  return bcrypt.compareSync(userPassword, databasePassword);\n};\n\nconst localLogin = new LocalStrategy(\n  localOptions,\n  async (username, password, done) => {\n    const resauth = await pgPool.query(\n      `select id,username,password from truser where username = $1`,\n      [username]\n    );\n    if (!resauth.rows.length > 0) {\n      return done(null, false);\n    }\n    if (!comparePass(password, resauth.rows[0].password)) {\n      return done(null, false);\n    }\n\n    return done(null, resauth.rows[0]);\n  }\n);\n\nconst privKey = \"qwerasdfqwerqwer12341sfasdfasdgcvbxclgsjldkfjasdf\";\n// Setup options for JWT Strategy\nconst jwtOptions = {\n  jwtFromRequest: ExtractJwt.fromHeader(\"authoken\"),\n  secretOrKey: privKey\n};\n\n// Create JWT strategy\nconst jwtLogin = new JwtStrategy(jwtOptions, async function(payload, done) {\n  // See if the user ID in the payload exists in our database\n  // If it does, call 'done' with that other\n  // otherwise, call done without a user object\n  const { id, username } = payload.user;\n  const resauth = await pgPool.query(\n    `select username from truser where id=$1 and username = $2`,\n    [id, username]\n  );\n  if (!resauth.rows.length > 0) {\n    return done(null, false);\n  }\n  return done(null, true);\n});\n\npassport.use(jwtLogin);\npassport.use(localLogin);\n"]}